name: ITDO_ERP2 Daily Processing Report

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9:00 AM UTC
  workflow_dispatch:      # Allow manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Generate ITDO_ERP2 Daily Report
        uses: actions/github-script@v7
        with:
          script: |
            const now = new Date();
            const oneDayAgo = new Date(now.getTime() - 24*60*60*1000);
            const oneWeekAgo = new Date(now.getTime() - 7*24*60*60*1000);
            
            console.log(`Generating ITDO_ERP2 report for: ${oneDayAgo.toISOString()} to ${now.toISOString()}`);
            
            // Fetch processed issues
            const processed = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-completed',
              since: oneDayAgo.toISOString(),
              state: 'all',
              per_page: 100
            });
            
            // Fetch failed issues
            const failed = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-failed',
              since: oneDayAgo.toISOString(),
              state: 'all',
              per_page: 100
            });
            
            // Fetch waiting issues
            const waiting = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-waiting',
              state: 'open',
              per_page: 100
            });
            
            // Calculate processing by type for ITDO_ERP2
            const processingTypes = {
              backend: 0,
              frontend: 0,
              testing: 0,
              infrastructure: 0,
              database: 0,
              security: 0,
              general: 0
            };
            
            processed.data.forEach(issue => {
              const labels = issue.labels.map(l => l.name);
              if (labels.includes('claude-code-backend')) processingTypes.backend++;
              else if (labels.includes('claude-code-frontend')) processingTypes.frontend++;
              else if (labels.includes('claude-code-testing')) processingTypes.testing++;
              else if (labels.includes('claude-code-infrastructure')) processingTypes.infrastructure++;
              else if (labels.includes('claude-code-database')) processingTypes.database++;
              else if (labels.includes('claude-code-security')) processingTypes.security++;
              else processingTypes.general++;
            });
            
            // Calculate metrics
            const totalProcessed = processed.data.length;
            const totalFailed = failed.data.length;
            const totalAttempted = totalProcessed + totalFailed;
            const successRate = totalAttempted > 0 ? (totalProcessed / totalAttempted * 100).toFixed(1) : 0;
            
            // Weekly comparison
            const weeklyProcessed = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-completed',
              since: oneWeekAgo.toISOString(),
              state: 'all',
              per_page: 100
            });
            
            const avgDailyProcessing = (weeklyProcessed.data.length / 7).toFixed(1);
            
            // Check milestone progress
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 10
            });
            
            // Generate report content
            const reportDate = now.toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            });
            
            const report = `# üìä ITDO_ERP2 Daily Processing Report
            
            **Date**: ${reportDate}
            **Project**: ITDO ERP System v2 - Modern ERP Solution
            **Report Period**: Last 24 hours
            
            ## üìà Summary
            
            | Metric | Value |
            |--------|-------|
            | ‚úÖ Successfully Processed | ${totalProcessed} |
            | ‚ùå Failed Processing | ${totalFailed} |
            | ‚è≥ Currently Waiting | ${waiting.data.length} |
            | üéØ Success Rate | ${successRate}% |
            | üìä 7-Day Average | ${avgDailyProcessing} issues/day |
            
            ## üè∑Ô∏è Processing by Component
            
            | Component | Count | Technology Stack |
            |-----------|-------|------------------|
            | Backend | ${processingTypes.backend} | Python 3.13, FastAPI, SQLAlchemy |
            | Frontend | ${processingTypes.frontend} | React 18, TypeScript 5, Vite |
            | Testing | ${processingTypes.testing} | pytest, vitest, coverage |
            | Infrastructure | ${processingTypes.infrastructure} | GitHub Actions, Podman |
            | Database | ${processingTypes.database} | PostgreSQL 15, Alembic, Redis 7 |
            | Security | ${processingTypes.security} | Keycloak, OAuth2/OIDC |
            | General | ${processingTypes.general} | Cross-component tasks |
            
            ## üéØ Current Sprint Progress
            ${milestones.data.length > 0 
              ? milestones.data.slice(0, 3).map(m => 
                  `- **${m.title}**: ${m.open_issues} open / ${m.closed_issues} closed (${m.closed_issues > 0 ? ((m.closed_issues / (m.open_issues + m.closed_issues)) * 100).toFixed(0) : 0}% complete)`
                ).join('\n')
              : '*No active milestones*'
            }
            
            ## üìã Detailed Results
            
            ### ‚úÖ Successfully Processed (${totalProcessed})
            ${totalProcessed > 0 
              ? processed.data.slice(0, 10).map(i => {
                  const type = i.labels.find(l => l.name.startsWith('claude-code-') && !['claude-code-completed', 'claude-code-processing'].includes(l.name))?.name.replace('claude-code-', '') || 'general';
                  return `- [#${i.number}](${i.html_url}): ${i.title} \`[${type}]\``;
                }).join('\n') + (totalProcessed > 10 ? `\n- ... and ${totalProcessed - 10} more` : '')
              : '*No issues processed in the last 24 hours*'
            }
            
            ### ‚ùå Failed Processing (${totalFailed})
            ${totalFailed > 0
              ? failed.data.map(i => `- [#${i.number}](${i.html_url}): ${i.title}`).join('\n')
              : '*No failures in the last 24 hours* üéâ'
            }
            
            ### ‚è≥ Currently Waiting (${waiting.data.length})
            ${waiting.data.length > 0
              ? waiting.data.slice(0, 5).map(i => `- [#${i.number}](${i.html_url}): ${i.title}`).join('\n') +
                (waiting.data.length > 5 ? `\n- ... and ${waiting.data.length - 5} more` : '')
              : '*No issues waiting for labels*'
            }
            
            ## üîç Quality Metrics
            
            - **TDD Compliance**: All processed issues follow Test-Driven Development
            - **Type Safety**: Strict TypeScript and mypy enforcement
            - **Code Coverage**: Maintaining >80% test coverage requirement
            - **Performance**: API response time <200ms target
            
            ## üí° Recommendations
            
            ${waiting.data.length > 10 
              ? '‚ö†Ô∏è **High number of waiting issues** - Consider reviewing and adding appropriate processing labels.'
              : ''
            }
            ${successRate < 90 && totalAttempted > 0
              ? '‚ö†Ô∏è **Success rate below 90%** - Review failed issues for common patterns.'
              : ''
            }
            ${totalProcessed === 0
              ? '‚ÑπÔ∏è **No processing activity** - Check if the workflow is properly configured.'
              : ''
            }
            ${processingTypes.testing < processingTypes.backend + processingTypes.frontend
              ? 'üìù **Testing gap detected** - Consider adding more testing issues to maintain TDD compliance.'
              : ''
            }
            
            ## üöÄ Development Focus Areas
            
            Based on processing patterns:
            ${Object.entries(processingTypes)
              .filter(([_, count]) => count > 0)
              .sort(([_, a], [__, b]) => b - a)
              .slice(0, 3)
              .map(([type, count]) => `- **${type.charAt(0).toUpperCase() + type.slice(1)}**: ${count} issues (${(count/totalProcessed*100).toFixed(0)}% of total)`)
              .join('\n')
            }
            
            ---
            
            *This report was automatically generated by the ITDO_ERP2 Label-Based Processing System.*
            *Following project standards: TDD, Type Safety, Performance Optimization*
            *Next report will be generated in 24 hours.*
            `;
            
            // Create report issue
            const reportIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìä ITDO_ERP2 Daily Report - ${now.toLocaleDateString()}`,
              body: report,
              labels: ['report', 'automated', 'project-management']
            });
            
            console.log(`Report created: ${reportIssue.data.html_url}`);
            
            // Close previous reports older than 7 days
            const oldReports = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'report,automated',
              state: 'open',
              per_page: 100
            });
            
            for (const oldReport of oldReports.data) {
              const createdDate = new Date(oldReport.created_at);
              if (now.getTime() - createdDate.getTime() > 7*24*60*60*1000) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: oldReport.number,
                  state: 'closed',
                  state_reason: 'completed'
                });
                console.log(`Closed old report: #${oldReport.number}`);
              }
            }