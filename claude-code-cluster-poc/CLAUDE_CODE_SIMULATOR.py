#!/usr/bin/env python3
"""
Claude Code Cluster - ローカル動作シミュレーター

Claude Code CLIがなくても基本的な動作を確認できるシミュレーター。
実際のClaude Codeの代わりに、事前定義されたテンプレートでコード生成をシミュレートします。
"""

import asyncio
import json
import tempfile
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List, Optional
import sys
import argparse
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn

# Add project path
sys.path.append(str(Path(__file__).parent))

console = Console()


class MockClaudeCodeCLI:
    """Claude Code CLIのモック実装"""
    
    def __init__(self):
        self.templates = {
            'backend': {
                'api.py': '''from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional

app = FastAPI()

class Item(BaseModel):
    id: int
    name: str
    description: Optional[str] = None

# Simulated implementation for: {issue_title}
@app.get("/items/{item_id}")
async def get_item(item_id: int):
    """Get item by ID"""
    # TODO: Implement database query
    return {"id": item_id, "name": "Sample Item", "description": "Generated by simulator"}

@app.post("/items")
async def create_item(item: Item):
    """Create new item"""
    # TODO: Implement database insertion
    return {"message": "Item created", "item": item}
''',
                'test_api.py': '''import pytest
from fastapi.testclient import TestClient
from .api import app

client = TestClient(app)

def test_get_item():
    response = client.get("/items/1")
    assert response.status_code == 200
    assert response.json()["id"] == 1

def test_create_item():
    response = client.post("/items", json={"id": 1, "name": "Test Item"})
    assert response.status_code == 200
'''
            },
            'frontend': {
                'Component.tsx': '''import React, { useState, useEffect } from 'react';

interface Props {
    title: string;
}

// Simulated implementation for: {issue_title}
export const Component: React.FC<Props> = ({ title }) => {
    const [data, setData] = useState<any>(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        // TODO: Implement data fetching
        setTimeout(() => {
            setData({ message: 'Generated by simulator' });
            setLoading(false);
        }, 1000);
    }, []);

    if (loading) return <div>Loading...</div>;

    return (
        <div className="component">
            <h2>{title}</h2>
            <pre>{JSON.stringify(data, null, 2)}</pre>
        </div>
    );
};
''',
                'Component.test.tsx': '''import React from 'react';
import { render, screen } from '@testing-library/react';
import { Component } from './Component';

describe('Component', () => {
    it('renders title', () => {
        render(<Component title="Test Title" />);
        expect(screen.getByText('Test Title')).toBeInTheDocument();
    });
});
'''
            },
            'testing': {
                'test_integration.py': '''import pytest
import requests
from unittest.mock import Mock, patch

# Simulated test implementation for: {issue_title}

class TestIntegration:
    """Integration tests for the feature"""
    
    @pytest.fixture
    def mock_api(self):
        with patch('requests.get') as mock:
            mock.return_value.json.return_value = {'status': 'ok'}
            yield mock
    
    def test_api_integration(self, mock_api):
        """Test API integration"""
        response = requests.get('http://test.api/endpoint')
        assert response.json()['status'] == 'ok'
    
    def test_error_handling(self):
        """Test error handling"""
        with pytest.raises(Exception):
            # Simulate error condition
            raise Exception("Simulated error")
''',
                'conftest.py': '''import pytest

@pytest.fixture
def test_data():
    """Provide test data"""
    return {
        'id': 1,
        'name': 'Test Item',
        'created_by': 'simulator'
    }
'''
            },
            'devops': {
                'Dockerfile': '''FROM python:3.11-slim

WORKDIR /app

# Simulated Dockerfile for: {issue_title}

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
''',
                'docker-compose.yml': '''version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:pass@db:5432/app
    depends_on:
      - db

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: app
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
''',
                '.github/workflows/ci.yml': '''name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Run tests
      run: |
        pytest
'''
            }
        }
    
    async def execute(self, context: str, workspace: Path, specialty: str = 'backend') -> Dict[str, Any]:
        """Claude Code実行をシミュレート"""
        
        # Extract issue title from context
        issue_title = "Simulated Task"
        if "Issue #" in context:
            lines = context.split('\n')
            for line in lines:
                if "Issue #" in line and ":" in line:
                    issue_title = line.split(':', 1)[1].strip()
                    break
        
        # Select templates based on specialty
        templates = self.templates.get(specialty, self.templates['backend'])
        
        created_files = []
        for filename, content in templates.items():
            file_path = workspace / filename
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Replace placeholders
            final_content = content.format(issue_title=issue_title)
            file_path.write_text(final_content)
            created_files.append(filename)
        
        return {
            'success': True,
            'files_created': created_files,
            'message': f'Simulated {specialty} implementation'
        }


class ClusterSimulator:
    """Claude Code Clusterのシミュレーター"""
    
    def __init__(self):
        self.claude_mock = MockClaudeCodeCLI()
        self.agents = {
            'backend-001': {'specialties': ['backend', 'api', 'database'], 'tasks': 0},
            'frontend-001': {'specialties': ['frontend', 'react', 'ui'], 'tasks': 0},
            'testing-001': {'specialties': ['testing', 'qa', 'pytest'], 'tasks': 0},
            'devops-001': {'specialties': ['devops', 'docker', 'ci'], 'tasks': 0}
        }
        self.tasks = {}
        self.workspace_root = Path(tempfile.mkdtemp(prefix='claude_simulator_'))
    
    def analyze_issue(self, issue: Dict[str, Any]) -> Dict[str, Any]:
        """Issue内容を解析して専門分野を判定"""
        title = issue['title'].lower()
        body = issue.get('body', '').lower()
        full_text = f"{title} {body}"
        
        # キーワードベースの簡易判定
        specialties = []
        if any(word in full_text for word in ['api', 'endpoint', 'backend', 'database', 'server']):
            specialties.append('backend')
        if any(word in full_text for word in ['ui', 'frontend', 'react', 'component', 'style']):
            specialties.append('frontend')
        if any(word in full_text for word in ['test', 'testing', 'qa', 'quality', 'coverage']):
            specialties.append('testing')
        if any(word in full_text for word in ['docker', 'deploy', 'ci', 'cd', 'infrastructure']):
            specialties.append('devops')
        
        # デフォルトはbackend
        if not specialties:
            specialties = ['backend']
        
        return {
            'requirements': specialties,
            'primary_specialty': specialties[0],
            'complexity': 'medium'
        }
    
    def select_agent(self, requirements: List[str]) -> str:
        """要件に基づいて最適なエージェントを選択"""
        best_agent = None
        best_score = 0
        
        for agent_id, agent_info in self.agents.items():
            # スコア計算: 専門分野の一致度と現在のタスク数
            matching_specialties = set(requirements) & set(agent_info['specialties'])
            score = len(matching_specialties) - (agent_info['tasks'] * 0.1)
            
            if score > best_score:
                best_score = score
                best_agent = agent_id
        
        return best_agent or 'backend-001'
    
    async def process_issue(self, issue: Dict[str, Any]) -> Dict[str, Any]:
        """Issueを処理してPRを作成（シミュレート）"""
        console.print(Panel(f"[bold blue]Processing Issue #{issue['number']}: {issue['title']}[/bold blue]"))
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            # 1. Issue解析
            task_progress = progress.add_task("Analyzing issue...", total=5)
            analysis = self.analyze_issue(issue)
            await asyncio.sleep(0.5)  # シミュレート遅延
            progress.update(task_progress, advance=1, description="Issue analyzed")
            
            # 2. エージェント選択
            progress.update(task_progress, description="Selecting agent...")
            selected_agent = self.select_agent(analysis['requirements'])
            self.agents[selected_agent]['tasks'] += 1
            await asyncio.sleep(0.5)
            progress.update(task_progress, advance=1, description=f"Assigned to {selected_agent}")
            
            # 3. ワークスペース作成
            progress.update(task_progress, description="Creating workspace...")
            task_id = f"task-{issue['number']}"
            workspace = self.workspace_root / task_id
            workspace.mkdir(parents=True, exist_ok=True)
            await asyncio.sleep(0.5)
            progress.update(task_progress, advance=1, description="Workspace created")
            
            # 4. Claude Code実行（シミュレート）
            progress.update(task_progress, description="Running Claude Code...")
            context = f"""
Issue #{issue['number']}: {issue['title']}

{issue.get('body', 'No description provided')}

Requirements: {', '.join(analysis['requirements'])}
"""
            
            specialty = analysis['primary_specialty']
            result = await self.claude_mock.execute(context, workspace, specialty)
            await asyncio.sleep(1.0)
            progress.update(task_progress, advance=1, description="Code generated")
            
            # 5. PR作成（シミュレート）
            progress.update(task_progress, description="Creating pull request...")
            pr_info = {
                'number': issue['number'] * 10,  # Simulated PR number
                'title': f"[{selected_agent}] Fix issue #{issue['number']}: {issue['title']}",
                'url': f"https://github.com/example/repo/pull/{issue['number'] * 10}",
                'files_changed': result['files_created']
            }
            await asyncio.sleep(0.5)
            progress.update(task_progress, advance=1, description="Pull request created")
            
            # タスク完了
            self.agents[selected_agent]['tasks'] -= 1
            
            return {
                'success': True,
                'task_id': task_id,
                'agent': selected_agent,
                'analysis': analysis,
                'pr': pr_info,
                'workspace': str(workspace)
            }
    
    def show_status(self):
        """クラスターの状態を表示"""
        # エージェント状態
        table = Table(title="Agent Status")
        table.add_column("Agent ID", style="cyan")
        table.add_column("Specialties", style="green")
        table.add_column("Current Tasks", style="yellow")
        table.add_column("Status", style="blue")
        
        for agent_id, info in self.agents.items():
            status = "Busy" if info['tasks'] > 0 else "Available"
            table.add_row(
                agent_id,
                ", ".join(info['specialties']),
                str(info['tasks']),
                status
            )
        
        console.print(table)
    
    def show_workspace_files(self, workspace: str):
        """生成されたファイルを表示"""
        workspace_path = Path(workspace)
        if not workspace_path.exists():
            console.print("[red]Workspace not found[/red]")
            return
        
        console.print(f"\n[bold]Generated files in {workspace_path.name}:[/bold]")
        
        for file_path in workspace_path.rglob('*'):
            if file_path.is_file():
                relative_path = file_path.relative_to(workspace_path)
                console.print(f"  📄 {relative_path}")
                
                # ファイル内容のプレビュー
                content = file_path.read_text()
                lines = content.split('\n')
                preview = '\n'.join(lines[:5])
                if len(lines) > 5:
                    preview += '\n    ...'
                
                console.print(f"[dim]{preview}[/dim]\n")
    
    def cleanup(self):
        """一時ファイルをクリーンアップ"""
        if self.workspace_root.exists():
            shutil.rmtree(self.workspace_root)


async def main():
    parser = argparse.ArgumentParser(description='Claude Code Cluster Simulator')
    parser.add_argument('--interactive', action='store_true', help='Run in interactive mode')
    parser.add_argument('--demo', action='store_true', help='Run demo with sample issues')
    args = parser.parse_args()
    
    simulator = ClusterSimulator()
    
    console.print(Panel.fit(
        "[bold green]Claude Code Cluster Simulator[/bold green]\n"
        "This simulator demonstrates the cluster behavior without requiring Claude Code CLI",
        border_style="green"
    ))
    
    if args.demo:
        # デモ用のサンプルIssue
        sample_issues = [
            {
                'number': 101,
                'title': 'Create user authentication API',
                'body': 'Implement JWT-based authentication with login and logout endpoints'
            },
            {
                'number': 102,
                'title': 'Add responsive navigation component',
                'body': 'Create a React component for responsive navigation with mobile support'
            },
            {
                'number': 103,
                'title': 'Add integration tests for payment system',
                'body': 'Write comprehensive integration tests for the payment processing module'
            },
            {
                'number': 104,
                'title': 'Dockerize the application',
                'body': 'Create Dockerfile and docker-compose.yml for local development'
            }
        ]
        
        console.print("\n[bold]Running demo with sample issues...[/bold]\n")
        
        for issue in sample_issues:
            result = await simulator.process_issue(issue)
            
            if result['success']:
                console.print(f"\n✅ [green]Successfully processed![/green]")
                console.print(f"   Task ID: {result['task_id']}")
                console.print(f"   Agent: {result['agent']}")
                console.print(f"   PR: {result['pr']['url']}")
                
                # Show generated files
                simulator.show_workspace_files(result['workspace'])
            
            console.print("\n" + "="*50 + "\n")
            await asyncio.sleep(1)
        
        # Show final status
        console.print("\n[bold]Final Cluster Status:[/bold]")
        simulator.show_status()
    
    elif args.interactive:
        # インタラクティブモード
        console.print("\n[bold]Interactive Mode[/bold]")
        console.print("Enter issue details to simulate processing (or 'quit' to exit)\n")
        
        while True:
            try:
                number = console.input("Issue number: ")
                if number.lower() == 'quit':
                    break
                
                title = console.input("Issue title: ")
                body = console.input("Issue description: ")
                
                issue = {
                    'number': int(number),
                    'title': title,
                    'body': body
                }
                
                result = await simulator.process_issue(issue)
                
                if result['success']:
                    console.print(f"\n✅ [green]Successfully processed![/green]")
                    simulator.show_workspace_files(result['workspace'])
                
                console.print("\n" + "="*50 + "\n")
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                console.print(f"[red]Error: {e}[/red]")
    
    else:
        # 基本的な動作テスト
        test_issue = {
            'number': 42,
            'title': 'Fix authentication bug',
            'body': 'Users cannot login with valid credentials. The API returns 401 error.'
        }
        
        result = await simulator.process_issue(test_issue)
        
        if result['success']:
            console.print(f"\n✅ [green]Simulation completed successfully![/green]")
            console.print(f"\nResults:")
            console.print(f"  - Task ID: {result['task_id']}")
            console.print(f"  - Assigned Agent: {result['agent']}")
            console.print(f"  - Analysis: {result['analysis']}")
            console.print(f"  - PR URL: {result['pr']['url']}")
            console.print(f"  - Workspace: {result['workspace']}")
            
            simulator.show_workspace_files(result['workspace'])
    
    # Cleanup
    simulator.cleanup()
    console.print("\n[dim]Simulator cleanup completed[/dim]")


if __name__ == "__main__":
    asyncio.run(main())